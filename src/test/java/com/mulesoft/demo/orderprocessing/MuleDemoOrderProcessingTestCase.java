/*
 * Generated by the Mule project wizard. http://mule.mulesoft.org
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */
package com.mulesoft.demo.orderprocessing;

import org.mule.api.MuleMessage;
import org.mule.module.client.MuleClient;
import org.mule.tck.FunctionalTestCase;
import org.mule.transport.NullPayload;

import java.util.ArrayList;
import java.util.List;

public class MuleDemoOrderProcessingTestCase extends FunctionalTestCase
{

    public OrderPerson customer;
    public OrderItem item;
    public List<OrderItem> itemList = new ArrayList<OrderItem>();
    public Order order;

    protected String getConfigResources()
    {
        return "mule-config.xml";
    }

    public void testTenPercentDiscount() throws Exception
    {
        MuleClient client = new MuleClient(muleContext);

        customer = new OrderPerson("Joe","Mack","New York","NY");
        item = new OrderItem("SONY-USB-WR-001","Sony USB Wireless Router", (float) 80.00,5);
        itemList.clear();
        itemList.add(item);
        order = new Order("0001232",customer,itemList);

        MuleMessage result = client.send("cxf:http://localhost:1081/orders?method=processOrder", order, null);
        assertNotNull(result);
        assertNull(result.getExceptionPayload());
        assertFalse(result.getPayload() instanceof NullPayload);
        assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><orderSummary><discountPercentage>10.0</discountPercentage><itemCount>5</itemCount><orderId>0001232</orderId><totalDiscountedPrice>360.0</totalDiscountedPrice><totalListPrice>400.0</totalListPrice></orderSummary>", result.getPayloadAsString());
    }

    public void testTwentyPercentDiscount() throws Exception
    {
        MuleClient client = new MuleClient(muleContext);

        customer = new OrderPerson("Peter","Piper","Atlanta","GA");
        item = new OrderItem("SONY-USB-WR-001","Sony USB Wireless Router", (float) 80.00,10);
        itemList.clear();
        itemList.add(item);
        order = new Order("0001233",customer,itemList);

        MuleMessage result = client.send("cxf:http://localhost:1081/orders?method=processOrder", order, null);
        assertNotNull(result);
        assertNull(result.getExceptionPayload());
        assertFalse(result.getPayload() instanceof NullPayload);
        assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><orderSummary><discountPercentage>20.0</discountPercentage><itemCount>10</itemCount><orderId>0001233</orderId><totalDiscountedPrice>640.0</totalDiscountedPrice><totalListPrice>800.0</totalListPrice></orderSummary>", result.getPayloadAsString());
    }


    public void testThirtyPercentDiscount() throws Exception
    {
        MuleClient client = new MuleClient(muleContext);

        customer = new OrderPerson("Micheal","Magee","Chicago","IL");
        item = new OrderItem("SONY-USB-WR-001","Sony USB Wireless Router", (float) 80.00,20);
        itemList.clear();
        itemList.add(item);
        order = new Order("0001234",customer,itemList);

        MuleMessage result = client.send("cxf:http://localhost:1081/orders?method=processOrder", order, null);
        assertNotNull(result);
        assertNull(result.getExceptionPayload());
        assertFalse(result.getPayload() instanceof NullPayload);
        assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><orderSummary><discountPercentage>30.0</discountPercentage><itemCount>20</itemCount><orderId>0001234</orderId><totalDiscountedPrice>1120.0</totalDiscountedPrice><totalListPrice>1600.0</totalListPrice></orderSummary>", result.getPayloadAsString());
    }


}
